const WebSocket = require('ws');

const PORT = process.env.PORT || 3000;
const server = new WebSocket.Server({ port: PORT });

/**
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ rooms:
 * {
 *   roomId1: [ { socket, playerId }, { socket, playerId }, ... ],
 *   roomId2: [ ... ],
 *   ...
 * }
 */
let rooms = {};

server.on('connection', (socket) => {
    console.log('üîå –ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è');

    const { roomId, playerId } = findOrCreateRoom(socket);

    // 1) –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≥—Ä–∞–≤—Ü–µ–≤—ñ –π–æ–≥–æ ID (0‚Äì3)
    socket.send(JSON.stringify({
        type: 'PlayerId',
        data: playerId
    }));

    // 2) –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ü—å–æ–º—É –≥—Ä–∞–≤—Ü—é —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö ID —É –∫—ñ–º–Ω–∞—Ç—ñ
    const allIds = rooms[roomId].map(p => p.playerId);
    socket.send(JSON.stringify({
        type: 'AllPlayerIds',
        data: allIds
    }));

    // 3) –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö —É –∫—ñ–º–Ω–∞—Ç—ñ (–≤–∫–ª—é—á–Ω–æ –∑ –Ω–æ–≤–∏–º), —â–æ –∑–∞–π—à–æ–≤ –Ω–æ–≤–∏–π –≥—Ä–∞–≤–µ—Ü—å
    broadcastToRoom(roomId, {
        type: 'PlayerJoined',
        data: playerId
    });

    // 4) –Ø–∫—â–æ –≤ –∫—ñ–º–Ω–∞—Ç—ñ –≤–∂–µ 4 –≥—Ä–∞–≤—Ü—ñ ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î–º–æ GameReady
    if (rooms[roomId].length === 4) {
        broadcastToRoom(roomId, {
            type: 'Message',
            data: 'GameReady'
        });
    }

    // 5) –û–±—Ä–æ–±–∫–∞ –≤—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞
    socket.on('message', (rawMessage) => {
        let msg;
        try {
            msg = JSON.parse(rawMessage);
        } catch (err) {
            console.error('‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', rawMessage);
            return;
        }

        console.log(`üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –≥—Ä–∞–≤—Ü—è ${playerId} —É –∫—ñ–º–Ω–∞—Ç—ñ ${roomId}:`, msg);

        // –Ø–∫—â–æ –∫–ª—ñ—î–Ω—Ç –ø—Ä–∏—Å–ª–∞–≤ –≤–ª–∞—Å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äú–∑–∞–∫—Ä–∏—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É‚Äù:
        if (msg.type === 'CloseRoom') {
            console.log(`‚ùó –ì—Ä–∞–≤–µ—Ü—å ${playerId} —ñ–Ω—ñ—Ü—ñ—é–≤–∞–≤ –∑–∞–∫—Ä–∏—Ç—Ç—è –∫—ñ–º–Ω–∞—Ç–∏ ${roomId}`);
            broadcastToRoom(roomId, {
                type: 'RoomClosed',
                data: playerId
            });
            rooms[roomId].forEach(p => {
                if (p.socket.readyState === WebSocket.OPEN) {
                    p.socket.close();
                }
            });
            delete rooms[roomId];
            return;
        }

        // –Ü–Ω–∞–∫—à–µ ‚Äî —Ä–æ–∑—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–µ—à—Ç—ñ –≥—Ä–∞–≤—Ü—ñ–≤ —É –∫—ñ–º–Ω–∞—Ç—ñ
        rooms[roomId].forEach(p => {
            if (p.socket !== socket && p.socket.readyState === WebSocket.OPEN) {
                p.socket.send(rawMessage);
            }
        });
    });

    // 6) –û–±—Ä–æ–±–∫–∞ –¥–∏—Å–∫–æ–Ω–µ–∫—Ç—É –∫–ª—ñ—î–Ω—Ç–∞
    socket.on('close', () => {
        const idx = rooms[roomId].findIndex(p => p.socket === socket);
        if (idx === -1) return;

        const departedId = rooms[roomId][idx].playerId;
        rooms[roomId].splice(idx, 1);
        console.log(`‚ùå –ì—Ä–∞–≤–µ—Ü—å ${departedId} –ø–æ–∫–∏–Ω—É–≤ –∫—ñ–º–Ω–∞—Ç—É ${roomId}`);

        // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —ñ–Ω—à–∏–º, —â–æ —Ü–µ–π –≥—Ä–∞–≤–µ—Ü—å –≤–∏–π—à–æ–≤
        broadcastToRoom(roomId, {
            type: 'PlayerDisconnected',
            data: departedId
        });

        // –Ø–∫—â–æ –∫—ñ–º–Ω–∞—Ç–∞ –ø–æ—Ä–æ–∂–Ω—è ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ —ó—ó
        if (rooms[roomId].length === 0) {
            delete rooms[roomId];
            console.log(`üèÅ –ö—ñ–º–Ω–∞—Ç–∞ ${roomId} –∑–∞–∫—Ä–∏—Ç–∞ (–ø–æ—Ä–æ–∂–Ω—è)`);
        }
    });
});

/**
 * –®—É–∫–∞—î –≤—ñ–ª—å–Ω—É –∫—ñ–º–Ω–∞—Ç—É —Ç–∞ –¥–æ–¥–∞—î –¥–æ –Ω–µ—ó –≥—Ä–∞–≤—Ü—è.
 * –Ø–∫—â–æ –Ω–µ–º–∞—î –∫—ñ–º–Ω–∞—Ç–∏ –∑ –º–µ–Ω—à–µ –Ω—ñ–∂ 4 –≥—Ä–∞–≤—Ü—è–º–∏ ‚Äî —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É.
 * –ü–æ–≤–µ—Ä—Ç–∞—î –æ–±‚Äô—î–∫—Ç { roomId, playerId }
 */
function findOrCreateRoom(socket) {
    for (let roomId in rooms) {
        if (rooms[roomId].length < 4) {
            const usedIds = rooms[roomId].map(p => p.playerId);
            let playerId = 0;
            while (usedIds.includes(playerId)) {
                playerId++;
            }
            rooms[roomId].push({ socket, playerId });
            console.log(`–ì—Ä–∞–≤–µ—Ü—å –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏ ${roomId} —è–∫ playerId=${playerId}`);
            return { roomId, playerId };
        }
    }

    const newRoomId = generateRoomId();
    rooms[newRoomId] = [{ socket, playerId: 0 }];
    console.log(`–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤—É –∫—ñ–º–Ω–∞—Ç—É: ${newRoomId} (playerId=0)`);
    return { roomId: newRoomId, playerId: 0 };
}

function generateRoomId() {
    return Math.random().toString(36).substr(2, 6);
}

/**
 * –†–æ–∑—Å–∏–ª–∞—î JSON-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –≥—Ä–∞–≤—Ü—è–º —É –∫—ñ–º–Ω–∞—Ç—ñ `roomId`.
 */
function broadcastToRoom(roomId, messageObj) {
    const raw = JSON.stringify(messageObj);
    rooms[roomId]?.forEach(p => {
        if (p.socket.readyState === WebSocket.OPEN) {
            p.socket.send(raw);
        }
    });
}

/**
 * –ó–∞–∫—Ä–∏–≤–∞—î –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∫—ñ–º–Ω–∞—Ç–∏.
 * –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è —É –∫–æ–∂–Ω—ñ–π –∫—ñ–º–Ω–∞—Ç—ñ –Ω–∞–¥—Å–∏–ª–∞—î {type: 'RoomClosedAll'},
 * –ø–æ—Ç—ñ–º –∑–∞–∫—Ä–∏–≤–∞—î –π–æ–≥–æ —Å–æ–∫–µ—Ç —ñ –≤–∏–¥–∞–ª—è—î –∫—ñ–º–Ω–∞—Ç—É.
 */
function closeAllRooms() {
    for (let roomId in rooms) {
        rooms[roomId].forEach(p => {
            if (p.socket.readyState === WebSocket.OPEN) {
                p.socket.send(JSON.stringify({
                    type: 'RoomClosedAll',
                    data: null
                }));
                p.socket.close();
            }
        });
        console.log(`–£—Å—ñ –∫–ª—ñ—î–Ω—Ç–∏ –≤ –∫—ñ–º–Ω–∞—Ç—ñ ${roomId} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—ñ –ø—Ä–æ –º–∞—Å–æ–≤–µ –∑–∞–∫—Ä–∏—Ç—Ç—è`);
        delete rooms[roomId];
    }
    console.log('‚ñ∂Ô∏è –£—Å—ñ –∫—ñ–º–Ω–∞—Ç–∏ –∑–∞–∫—Ä–∏—Ç—ñ');
}

// –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–ª–∏–∫—É closeAllRooms():
// setTimeout(() => closeAllRooms(), 60000); // –∑–∞–∫—Ä–∏—î –≤—Å—ñ –∫—ñ–º–Ω–∞—Ç–∏ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É

console.log(`WebSocket-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);